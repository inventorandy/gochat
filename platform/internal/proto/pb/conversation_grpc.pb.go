// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ConversationServiceClient is the client API for ConversationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConversationServiceClient interface {
	// Conversation Methods
	CreateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error)
	UpdateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error)
	GetConversationByID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Conversation, error)
	AddUserToConversation(ctx context.Context, in *ConversationHasParticipant, opts ...grpc.CallOption) (*Conversation, error)
	GetPublicConversations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConversationList, error)
	GetPrivateConversationsForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ConversationList, error)
	UserHasAccessToConversation(ctx context.Context, in *UserAccessQuery, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error)
	// Message Methods
	CreateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	// Streaming Methods
	ChatStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ConversationService_ChatStreamClient, error)
}

type conversationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConversationServiceClient(cc grpc.ClientConnInterface) ConversationServiceClient {
	return &conversationServiceClient{cc}
}

func (c *conversationServiceClient) CreateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/pb.ConversationService/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) UpdateConversation(ctx context.Context, in *Conversation, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/pb.ConversationService/UpdateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetConversationByID(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/pb.ConversationService/GetConversationByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) AddUserToConversation(ctx context.Context, in *ConversationHasParticipant, opts ...grpc.CallOption) (*Conversation, error) {
	out := new(Conversation)
	err := c.cc.Invoke(ctx, "/pb.ConversationService/AddUserToConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetPublicConversations(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConversationList, error) {
	out := new(ConversationList)
	err := c.cc.Invoke(ctx, "/pb.ConversationService/GetPublicConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) GetPrivateConversationsForUser(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*ConversationList, error) {
	out := new(ConversationList)
	err := c.cc.Invoke(ctx, "/pb.ConversationService/GetPrivateConversationsForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) UserHasAccessToConversation(ctx context.Context, in *UserAccessQuery, opts ...grpc.CallOption) (*wrapperspb.BoolValue, error) {
	out := new(wrapperspb.BoolValue)
	err := c.cc.Invoke(ctx, "/pb.ConversationService/UserHasAccessToConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) CreateMessage(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/pb.ConversationService/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *conversationServiceClient) ChatStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (ConversationService_ChatStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &ConversationService_ServiceDesc.Streams[0], "/pb.ConversationService/ChatStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &conversationServiceChatStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ConversationService_ChatStreamClient interface {
	Recv() (*ChatStreamUpdate, error)
	grpc.ClientStream
}

type conversationServiceChatStreamClient struct {
	grpc.ClientStream
}

func (x *conversationServiceChatStreamClient) Recv() (*ChatStreamUpdate, error) {
	m := new(ChatStreamUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConversationServiceServer is the server API for ConversationService service.
// All implementations must embed UnimplementedConversationServiceServer
// for forward compatibility
type ConversationServiceServer interface {
	// Conversation Methods
	CreateConversation(context.Context, *Conversation) (*Conversation, error)
	UpdateConversation(context.Context, *Conversation) (*Conversation, error)
	GetConversationByID(context.Context, *wrapperspb.StringValue) (*Conversation, error)
	AddUserToConversation(context.Context, *ConversationHasParticipant) (*Conversation, error)
	GetPublicConversations(context.Context, *emptypb.Empty) (*ConversationList, error)
	GetPrivateConversationsForUser(context.Context, *wrapperspb.StringValue) (*ConversationList, error)
	UserHasAccessToConversation(context.Context, *UserAccessQuery) (*wrapperspb.BoolValue, error)
	// Message Methods
	CreateMessage(context.Context, *Message) (*Message, error)
	// Streaming Methods
	ChatStream(*emptypb.Empty, ConversationService_ChatStreamServer) error
	mustEmbedUnimplementedConversationServiceServer()
}

// UnimplementedConversationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConversationServiceServer struct {
}

func (UnimplementedConversationServiceServer) CreateConversation(context.Context, *Conversation) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedConversationServiceServer) UpdateConversation(context.Context, *Conversation) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConversation not implemented")
}
func (UnimplementedConversationServiceServer) GetConversationByID(context.Context, *wrapperspb.StringValue) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversationByID not implemented")
}
func (UnimplementedConversationServiceServer) AddUserToConversation(context.Context, *ConversationHasParticipant) (*Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserToConversation not implemented")
}
func (UnimplementedConversationServiceServer) GetPublicConversations(context.Context, *emptypb.Empty) (*ConversationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPublicConversations not implemented")
}
func (UnimplementedConversationServiceServer) GetPrivateConversationsForUser(context.Context, *wrapperspb.StringValue) (*ConversationList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPrivateConversationsForUser not implemented")
}
func (UnimplementedConversationServiceServer) UserHasAccessToConversation(context.Context, *UserAccessQuery) (*wrapperspb.BoolValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserHasAccessToConversation not implemented")
}
func (UnimplementedConversationServiceServer) CreateMessage(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedConversationServiceServer) ChatStream(*emptypb.Empty, ConversationService_ChatStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ChatStream not implemented")
}
func (UnimplementedConversationServiceServer) mustEmbedUnimplementedConversationServiceServer() {}

// UnsafeConversationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConversationServiceServer will
// result in compilation errors.
type UnsafeConversationServiceServer interface {
	mustEmbedUnimplementedConversationServiceServer()
}

func RegisterConversationServiceServer(s grpc.ServiceRegistrar, srv ConversationServiceServer) {
	s.RegisterService(&ConversationService_ServiceDesc, srv)
}

func _ConversationService_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConversationService/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).CreateConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_UpdateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conversation)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).UpdateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConversationService/UpdateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).UpdateConversation(ctx, req.(*Conversation))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetConversationByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetConversationByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConversationService/GetConversationByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetConversationByID(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_AddUserToConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConversationHasParticipant)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).AddUserToConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConversationService/AddUserToConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).AddUserToConversation(ctx, req.(*ConversationHasParticipant))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetPublicConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetPublicConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConversationService/GetPublicConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetPublicConversations(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_GetPrivateConversationsForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).GetPrivateConversationsForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConversationService/GetPrivateConversationsForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).GetPrivateConversationsForUser(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_UserHasAccessToConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccessQuery)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).UserHasAccessToConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConversationService/UserHasAccessToConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).UserHasAccessToConversation(ctx, req.(*UserAccessQuery))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConversationServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.ConversationService/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConversationServiceServer).CreateMessage(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConversationService_ChatStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ConversationServiceServer).ChatStream(m, &conversationServiceChatStreamServer{stream})
}

type ConversationService_ChatStreamServer interface {
	Send(*ChatStreamUpdate) error
	grpc.ServerStream
}

type conversationServiceChatStreamServer struct {
	grpc.ServerStream
}

func (x *conversationServiceChatStreamServer) Send(m *ChatStreamUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// ConversationService_ServiceDesc is the grpc.ServiceDesc for ConversationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConversationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.ConversationService",
	HandlerType: (*ConversationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateConversation",
			Handler:    _ConversationService_CreateConversation_Handler,
		},
		{
			MethodName: "UpdateConversation",
			Handler:    _ConversationService_UpdateConversation_Handler,
		},
		{
			MethodName: "GetConversationByID",
			Handler:    _ConversationService_GetConversationByID_Handler,
		},
		{
			MethodName: "AddUserToConversation",
			Handler:    _ConversationService_AddUserToConversation_Handler,
		},
		{
			MethodName: "GetPublicConversations",
			Handler:    _ConversationService_GetPublicConversations_Handler,
		},
		{
			MethodName: "GetPrivateConversationsForUser",
			Handler:    _ConversationService_GetPrivateConversationsForUser_Handler,
		},
		{
			MethodName: "UserHasAccessToConversation",
			Handler:    _ConversationService_UserHasAccessToConversation_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _ConversationService_CreateMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ChatStream",
			Handler:       _ConversationService_ChatStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "conversation.proto",
}
