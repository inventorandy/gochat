// Code generated by MockGen. DO NOT EDIT.
// Source: ./platform/services/conversation/interfaces/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	types "gochat/platform/services/conversation/types"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddUserToConversation mocks base method.
func (m *MockRepository) AddUserToConversation(userID, conversationID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToConversation", userID, conversationID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToConversation indicates an expected call of AddUserToConversation.
func (mr *MockRepositoryMockRecorder) AddUserToConversation(userID, conversationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToConversation", reflect.TypeOf((*MockRepository)(nil).AddUserToConversation), userID, conversationID)
}

// CreateConversation mocks base method.
func (m *MockRepository) CreateConversation(conversation *types.Conversation) (*types.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateConversation", conversation)
	ret0, _ := ret[0].(*types.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateConversation indicates an expected call of CreateConversation.
func (mr *MockRepositoryMockRecorder) CreateConversation(conversation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateConversation", reflect.TypeOf((*MockRepository)(nil).CreateConversation), conversation)
}

// CreateDefaultConversations mocks base method.
func (m *MockRepository) CreateDefaultConversations() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDefaultConversations")
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateDefaultConversations indicates an expected call of CreateDefaultConversations.
func (mr *MockRepositoryMockRecorder) CreateDefaultConversations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDefaultConversations", reflect.TypeOf((*MockRepository)(nil).CreateDefaultConversations))
}

// CreateMessage mocks base method.
func (m *MockRepository) CreateMessage(message *types.Message) (*types.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMessage", message)
	ret0, _ := ret[0].(*types.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMessage indicates an expected call of CreateMessage.
func (mr *MockRepositoryMockRecorder) CreateMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMessage", reflect.TypeOf((*MockRepository)(nil).CreateMessage), message)
}

// GetConversationByID mocks base method.
func (m *MockRepository) GetConversationByID(conversationID uuid.UUID) (*types.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationByID", conversationID)
	ret0, _ := ret[0].(*types.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationByID indicates an expected call of GetConversationByID.
func (mr *MockRepositoryMockRecorder) GetConversationByID(conversationID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationByID", reflect.TypeOf((*MockRepository)(nil).GetConversationByID), conversationID)
}

// GetConversationByLabel mocks base method.
func (m *MockRepository) GetConversationByLabel(conversationLabel string) (*types.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationByLabel", conversationLabel)
	ret0, _ := ret[0].(*types.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationByLabel indicates an expected call of GetConversationByLabel.
func (mr *MockRepositoryMockRecorder) GetConversationByLabel(conversationLabel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationByLabel", reflect.TypeOf((*MockRepository)(nil).GetConversationByLabel), conversationLabel)
}

// GetConversationParticipantByID mocks base method.
func (m *MockRepository) GetConversationParticipantByID(conversationID, userID uuid.UUID) (*types.ConversationHasParticipant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConversationParticipantByID", conversationID, userID)
	ret0, _ := ret[0].(*types.ConversationHasParticipant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConversationParticipantByID indicates an expected call of GetConversationParticipantByID.
func (mr *MockRepositoryMockRecorder) GetConversationParticipantByID(conversationID, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConversationParticipantByID", reflect.TypeOf((*MockRepository)(nil).GetConversationParticipantByID), conversationID, userID)
}

// GetPrivateConversationsForUser mocks base method.
func (m *MockRepository) GetPrivateConversationsForUser(userID uuid.UUID) ([]*types.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateConversationsForUser", userID)
	ret0, _ := ret[0].([]*types.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateConversationsForUser indicates an expected call of GetPrivateConversationsForUser.
func (mr *MockRepositoryMockRecorder) GetPrivateConversationsForUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateConversationsForUser", reflect.TypeOf((*MockRepository)(nil).GetPrivateConversationsForUser), userID)
}

// GetPublicConversations mocks base method.
func (m *MockRepository) GetPublicConversations() ([]*types.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPublicConversations")
	ret0, _ := ret[0].([]*types.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPublicConversations indicates an expected call of GetPublicConversations.
func (mr *MockRepositoryMockRecorder) GetPublicConversations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPublicConversations", reflect.TypeOf((*MockRepository)(nil).GetPublicConversations))
}

// UpdateConversation mocks base method.
func (m *MockRepository) UpdateConversation(conversation *types.Conversation) (*types.Conversation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateConversation", conversation)
	ret0, _ := ret[0].(*types.Conversation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateConversation indicates an expected call of UpdateConversation.
func (mr *MockRepositoryMockRecorder) UpdateConversation(conversation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateConversation", reflect.TypeOf((*MockRepository)(nil).UpdateConversation), conversation)
}
