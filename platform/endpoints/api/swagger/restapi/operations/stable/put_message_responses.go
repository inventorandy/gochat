// Code generated by go-swagger; DO NOT EDIT.

package stable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gochat/platform/endpoints/api/swagger/models"
)

// PutMessageOKCode is the HTTP code returned for type PutMessageOK
const PutMessageOKCode int = 200

/*PutMessageOK Message was updated.

swagger:response putMessageOK
*/
type PutMessageOK struct {

	/*
	  In: Body
	*/
	Payload *models.Message `json:"body,omitempty"`
}

// NewPutMessageOK creates PutMessageOK with default headers values
func NewPutMessageOK() *PutMessageOK {

	return &PutMessageOK{}
}

// WithPayload adds the payload to the put message o k response
func (o *PutMessageOK) WithPayload(payload *models.Message) *PutMessageOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put message o k response
func (o *PutMessageOK) SetPayload(payload *models.Message) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMessageOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// PutMessageBadRequestCode is the HTTP code returned for type PutMessageBadRequest
const PutMessageBadRequestCode int = 400

/*PutMessageBadRequest Bad Request

swagger:response putMessageBadRequest
*/
type PutMessageBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPutMessageBadRequest creates PutMessageBadRequest with default headers values
func NewPutMessageBadRequest() *PutMessageBadRequest {

	return &PutMessageBadRequest{}
}

// WithPayload adds the payload to the put message bad request response
func (o *PutMessageBadRequest) WithPayload(payload interface{}) *PutMessageBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put message bad request response
func (o *PutMessageBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMessageBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutMessageUnauthorizedCode is the HTTP code returned for type PutMessageUnauthorized
const PutMessageUnauthorizedCode int = 401

/*PutMessageUnauthorized Unauthorized

swagger:response putMessageUnauthorized
*/
type PutMessageUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPutMessageUnauthorized creates PutMessageUnauthorized with default headers values
func NewPutMessageUnauthorized() *PutMessageUnauthorized {

	return &PutMessageUnauthorized{}
}

// WithPayload adds the payload to the put message unauthorized response
func (o *PutMessageUnauthorized) WithPayload(payload interface{}) *PutMessageUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put message unauthorized response
func (o *PutMessageUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMessageUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// PutMessageInternalServerErrorCode is the HTTP code returned for type PutMessageInternalServerError
const PutMessageInternalServerErrorCode int = 500

/*PutMessageInternalServerError Unknown Error

swagger:response putMessageInternalServerError
*/
type PutMessageInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewPutMessageInternalServerError creates PutMessageInternalServerError with default headers values
func NewPutMessageInternalServerError() *PutMessageInternalServerError {

	return &PutMessageInternalServerError{}
}

// WithPayload adds the payload to the put message internal server error response
func (o *PutMessageInternalServerError) WithPayload(payload interface{}) *PutMessageInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the put message internal server error response
func (o *PutMessageInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *PutMessageInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
