// Code generated by go-swagger; DO NOT EDIT.

package stable

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"gochat/platform/endpoints/api/swagger/models"
)

// GetConversationOKCode is the HTTP code returned for type GetConversationOK
const GetConversationOKCode int = 200

/*GetConversationOK Conversations were returned.

swagger:response getConversationOK
*/
type GetConversationOK struct {

	/*
	  In: Body
	*/
	Payload models.ConversationList `json:"body,omitempty"`
}

// NewGetConversationOK creates GetConversationOK with default headers values
func NewGetConversationOK() *GetConversationOK {

	return &GetConversationOK{}
}

// WithPayload adds the payload to the get conversation o k response
func (o *GetConversationOK) WithPayload(payload models.ConversationList) *GetConversationOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get conversation o k response
func (o *GetConversationOK) SetPayload(payload models.ConversationList) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetConversationOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = models.ConversationList{}
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetConversationBadRequestCode is the HTTP code returned for type GetConversationBadRequest
const GetConversationBadRequestCode int = 400

/*GetConversationBadRequest Bad Request

swagger:response getConversationBadRequest
*/
type GetConversationBadRequest struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetConversationBadRequest creates GetConversationBadRequest with default headers values
func NewGetConversationBadRequest() *GetConversationBadRequest {

	return &GetConversationBadRequest{}
}

// WithPayload adds the payload to the get conversation bad request response
func (o *GetConversationBadRequest) WithPayload(payload interface{}) *GetConversationBadRequest {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get conversation bad request response
func (o *GetConversationBadRequest) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetConversationBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(400)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetConversationUnauthorizedCode is the HTTP code returned for type GetConversationUnauthorized
const GetConversationUnauthorizedCode int = 401

/*GetConversationUnauthorized Unauthorized

swagger:response getConversationUnauthorized
*/
type GetConversationUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetConversationUnauthorized creates GetConversationUnauthorized with default headers values
func NewGetConversationUnauthorized() *GetConversationUnauthorized {

	return &GetConversationUnauthorized{}
}

// WithPayload adds the payload to the get conversation unauthorized response
func (o *GetConversationUnauthorized) WithPayload(payload interface{}) *GetConversationUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get conversation unauthorized response
func (o *GetConversationUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetConversationUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetConversationNotFoundCode is the HTTP code returned for type GetConversationNotFound
const GetConversationNotFoundCode int = 404

/*GetConversationNotFound Not Found

swagger:response getConversationNotFound
*/
type GetConversationNotFound struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetConversationNotFound creates GetConversationNotFound with default headers values
func NewGetConversationNotFound() *GetConversationNotFound {

	return &GetConversationNotFound{}
}

// WithPayload adds the payload to the get conversation not found response
func (o *GetConversationNotFound) WithPayload(payload interface{}) *GetConversationNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get conversation not found response
func (o *GetConversationNotFound) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetConversationNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetConversationInternalServerErrorCode is the HTTP code returned for type GetConversationInternalServerError
const GetConversationInternalServerErrorCode int = 500

/*GetConversationInternalServerError Unknown Error

swagger:response getConversationInternalServerError
*/
type GetConversationInternalServerError struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewGetConversationInternalServerError creates GetConversationInternalServerError with default headers values
func NewGetConversationInternalServerError() *GetConversationInternalServerError {

	return &GetConversationInternalServerError{}
}

// WithPayload adds the payload to the get conversation internal server error response
func (o *GetConversationInternalServerError) WithPayload(payload interface{}) *GetConversationInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get conversation internal server error response
func (o *GetConversationInternalServerError) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetConversationInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
